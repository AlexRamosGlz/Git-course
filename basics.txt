##		 Comandos Basicos en Git 		##
git init #crea un repositorio vacio


-- git status --

git status -> nos muestra el estado en que esta nuestra brancht

En la rama test
Archivos sin seguimiento:
  (usa "git add <archivo>..." para incluirlo a lo que será confirmado)
	.gitignore

no hay nada agregado al commit pero hay archivos sin seguimiento presentes (usa "git add" para hacerles seguimiento)



-- git log --

git log -> muestra el log de todos los movimientos en la rama

git log                                           ok | 1m 39s | 21:11:32 
commit 60abb776211f4464c2518b635b1db35474afa7c6 (HEAD -> test)
Author: AlexRamosGlz <joralexfx@gmail.com>
Date:   Fri Feb 14 21:02:56 2025 -0600

    Primer mensaje de commit usando vim


-- git reset -- 

git reset --hard  <commit> -> resetea el HEAD al commit especificado, borrando los cambios posteriores


## -- ANTES DE git reset --
~/Desktop/Software/Git | test  git log --oneline                                                            ok | 15:04:44 
0e84955 (HEAD -> test) tail de \/etc\/passwd  agregado a basics.txt
791a571 basic.txt modificado
886e0a1 (origin/test) test.sh  deleted
60abb77 Primer mensaje de commit usando vim
c0f4f32 test
3d78bbb (main) test commit

 ~/Desktop/Software/Git | test  git reset --hard 791a571                                                     ok | 15:05:10 
HEAD está ahora en 791a571 basic.txt modificado

## -- DESPUES DE git reset --
 ~/Desktop/Software/Git | test  git log --oneline                                                            ok | 15:05:47 
791a571 (HEAD -> test) basic.txt modificado
886e0a1 (origin/test) test.sh  deleted
60abb77 Primer mensaje de commit usando vim
c0f4f32 test
3d78bbb (main) test commit


-- git diff --

git diff <branch> <branch>  -> nos muestra la diferencia entre archivos entre ramas, o diferencia de archives de la misma rama antes del commit 

-- git reflog  --

git reflog 	-> muestra el historial de todos los movimientos que se han hecho en el repositorio


-- git tag --

git tag 	-> nos sirve para taggear un commit con la descripcion que queramos, se usa tambien con 'git checkout tags/<tag_name>' para movernos al commit 

git checkout tags/test_1



-- git switch -- 

git switch <branch> 	-> se usa para cambiar de rama



-- git merge --

git merge <branch_to_merge> ->  fuciona los merges de la branch actual con la 'branch_to_merge'
